{
    "docs": [
        {
            "location": "/",
            "text": "Welcome to BioDynaMo\n\n\nWhat is BioDynaMo?\n\n\nThe BioDynaMo project aims at a general platform for computer simulations of\nbiological tissue dynamics, such as for example brain development. Since these\nscientific investigations require extensive computer resources, this platform\nshould be executable on hybrid cloud computing systems, allowing for the efficient\nuse of state-of-the-art computing technology.",
            "title": "Home"
        },
        {
            "location": "/#welcome-to-biodynamo",
            "text": "",
            "title": "Welcome to BioDynaMo"
        },
        {
            "location": "/#what-is-biodynamo",
            "text": "The BioDynaMo project aims at a general platform for computer simulations of\nbiological tissue dynamics, such as for example brain development. Since these\nscientific investigations require extensive computer resources, this platform\nshould be executable on hybrid cloud computing systems, allowing for the efficient\nuse of state-of-the-art computing technology.",
            "title": "What is BioDynaMo?"
        },
        {
            "location": "/installation/",
            "text": "Getting Started\n\n\nThere are two types of installations of BioDynaMo: the \nuser installation\n and\nthe \ndevelopers installation\n. Currently supported platforms are Linux and\nMac OS X. Below you will find instructions on how to install each installation\ntype for the supported platforms.\n\n\nUser Installation\n\n\nThe user installation is intended for those that want to make use of the\nexisting features of BioDynaMo and only focus on implementing biological models\nwith those features.\n\n\nLinux\n\n\nwget https://github.com/BioDynaMo/biodynamo/releases/download/v0.1.0/biodynamo_0.1.0_amd64.snap\nsudo snap install --dangerous --classic biodynamo_0.1.0_amd64.snap\n\n\n\n\n\nMac OS\n\n\nbrew install Biodynamo/biodynamo/biodynamo\n\n\n\n\n\nDeveloper Installation\n\n\nThe development installation is intended for those that want to make changes to\nBioDynaMo itself, by creating new features or extending existing ones.\n\n\nLinux\n\n\ngit clone https://github.com/BioDynaMo/biodynamo\n\ncd\n biodynamo\n\nsudo script/install_prerequesites_ubuntu_16.04.sh\n\n\n# source biodynamo environment\n\n\nsource\n /opt/biodynamo/biodynamo_dev.env\n\nmkdir build \n&&\n \ncd\n build\ncmake .. \n&&\n make -j4\nsudo make install\n\n\n\n\n\nMac OS\n\n\n\n\nNote\n\n\nThe developement installation requires you to have homebrew installed\n\n\n\n\ngit clone https://github.com/BioDynaMo/biodynamo\n\ncd\n biodynamo\n\nscript/install_prerequesites_macos.sh\n\n\n# source biodynamo environment\n\n\nsource\n /opt/biodynamo/biodynamo_dev.env\n\nmkdir build \n&&\n \ncd\n build\ncmake .. \n&&\n make -j4\nsudo make install",
            "title": "Installation"
        },
        {
            "location": "/installation/#getting-started",
            "text": "There are two types of installations of BioDynaMo: the  user installation  and\nthe  developers installation . Currently supported platforms are Linux and\nMac OS X. Below you will find instructions on how to install each installation\ntype for the supported platforms.",
            "title": "Getting Started"
        },
        {
            "location": "/installation/#user-installation",
            "text": "The user installation is intended for those that want to make use of the\nexisting features of BioDynaMo and only focus on implementing biological models\nwith those features.",
            "title": "User Installation"
        },
        {
            "location": "/installation/#linux",
            "text": "wget https://github.com/BioDynaMo/biodynamo/releases/download/v0.1.0/biodynamo_0.1.0_amd64.snap\nsudo snap install --dangerous --classic biodynamo_0.1.0_amd64.snap",
            "title": "Linux"
        },
        {
            "location": "/installation/#mac-os",
            "text": "brew install Biodynamo/biodynamo/biodynamo",
            "title": "Mac OS"
        },
        {
            "location": "/installation/#developer-installation",
            "text": "The development installation is intended for those that want to make changes to\nBioDynaMo itself, by creating new features or extending existing ones.",
            "title": "Developer Installation"
        },
        {
            "location": "/installation/#linux_1",
            "text": "git clone https://github.com/BioDynaMo/biodynamo cd  biodynamo\n\nsudo script/install_prerequesites_ubuntu_16.04.sh # source biodynamo environment  source  /opt/biodynamo/biodynamo_dev.env\n\nmkdir build  &&   cd  build\ncmake ..  &&  make -j4\nsudo make install",
            "title": "Linux"
        },
        {
            "location": "/installation/#mac-os_1",
            "text": "Note  The developement installation requires you to have homebrew installed   git clone https://github.com/BioDynaMo/biodynamo cd  biodynamo\n\nscript/install_prerequesites_macos.sh # source biodynamo environment  source  /opt/biodynamo/biodynamo_dev.env\n\nmkdir build  &&   cd  build\ncmake ..  &&  make -j4\nsudo make install",
            "title": "Mac OS"
        },
        {
            "location": "/usage/",
            "text": "Usage\n\n\nThere is a slight difference in usage of BioDynaMo between the user-installed\nversion and the developer-installed version. Below you will find the usage\ninstructions for the user-installed version. At the \nbottom of the page\n you can\nfind some remarks for the developer-installed version.\n\n\nSetting up the Command Line Interface\n\n\nSetting up a simulation and running it is done with the BioDynaMo command line\ninterface (CLI). \n\n\n\n\nNote (for Mac OS users)\n\n\nIn order for the CLI to be available in your shell environment\nit is necessary to run the following command:\n\n\nsource biodynamo.env\n\n\n\n\nBasic Workflow\n\n\nA basic BioDynaMo workflow looks as follows:\n\n\n1. Create a new project\n\n\nTo create a new project run the following command:\n\n\nbiodynamo new <enter_name>\n\n\n\n\n\nThis command creates a new Git repository for you with the name specified\nin the \n<enter_name>\n placeholder. It will ask you to login with your Github\ncredentials to make your project files remotely accessible. You will see a folder appear with the same\nname, containing some template files to get you started.\n\n\n\n\nTip\n\n\nIf you wish not to have your Github account linked to your project you can\nappend the \n--no-github\n option to the command. You will however not be able\nto use the \nbiodynamo assist\n command as explained below.\n\n\n\n\n2. Implement your model\n\n\nThe provided template files in your newly created folder can be used as a\nstarting point for your simulation. The \nsrc\n directory contains the files with\nthe source code that defines the simulation. You can edit and add the code that\ndescribes your model in this folder.\n\n\nTo find out about the features that BioDynaMo offers, please check out the \nDocumentation\n.\nFor example projects, see the \nExercises\n\n\n3. Run the simulation\n\n\nBuilding the simulation and running it can be done with the command:\n\n\nbiodynamo run\n\n\n\n\n\nAll your source code will be compiled and linked against the BioDynaMo libraries, and an executable file\nwill be created and run. It is at this point you might encounter compilation errors.\nYou will need to fix them before the simulation can actually run.\n\n\nRequest assistance\n\n\nIt can happen that you encounter an error or issue that you cannot solve on your own. \nOr you might be convinced that there is a bug in BioDynaMo. \nFor such occasions we have provided you with BioDynaMo assistance:\n\n\nbiodynamo assist\n\n\n\n\n\nThis command will create a folder called \ndebug\n in which debug information will be collected.\nA git branch will be created and uploaded to Github. Send the link to this branch to us, \nso we can take a look at the issue. Check out \nContact\n on how to contact us.\n\n\nNotes for developers\n\n\nIf you have installed the developers version and you want to make use of your\ncustom features then the procedure is similar to the user-installed usage. The\nonly extra step that needs to be performed is the following one at the beginning:\n\n\nsource\n /opt/biodynamo/biodynamo_dev.env\n\n\n\n\n\n\n\nMac OS users\n\n\nYou will \nnot\n need to \nsource biodynamo.env\n after this.",
            "title": "Usage"
        },
        {
            "location": "/usage/#usage",
            "text": "There is a slight difference in usage of BioDynaMo between the user-installed\nversion and the developer-installed version. Below you will find the usage\ninstructions for the user-installed version. At the  bottom of the page  you can\nfind some remarks for the developer-installed version.",
            "title": "Usage"
        },
        {
            "location": "/usage/#setting-up-the-command-line-interface",
            "text": "Setting up a simulation and running it is done with the BioDynaMo command line\ninterface (CLI).    Note (for Mac OS users)  In order for the CLI to be available in your shell environment\nit is necessary to run the following command:  source biodynamo.env",
            "title": "Setting up the Command Line Interface"
        },
        {
            "location": "/usage/#basic-workflow",
            "text": "A basic BioDynaMo workflow looks as follows:",
            "title": "Basic Workflow"
        },
        {
            "location": "/usage/#1-create-a-new-project",
            "text": "To create a new project run the following command:  biodynamo new <enter_name>  This command creates a new Git repository for you with the name specified\nin the  <enter_name>  placeholder. It will ask you to login with your Github\ncredentials to make your project files remotely accessible. You will see a folder appear with the same\nname, containing some template files to get you started.   Tip  If you wish not to have your Github account linked to your project you can\nappend the  --no-github  option to the command. You will however not be able\nto use the  biodynamo assist  command as explained below.",
            "title": "1. Create a new project"
        },
        {
            "location": "/usage/#2-implement-your-model",
            "text": "The provided template files in your newly created folder can be used as a\nstarting point for your simulation. The  src  directory contains the files with\nthe source code that defines the simulation. You can edit and add the code that\ndescribes your model in this folder.  To find out about the features that BioDynaMo offers, please check out the  Documentation .\nFor example projects, see the  Exercises",
            "title": "2. Implement your model"
        },
        {
            "location": "/usage/#3-run-the-simulation",
            "text": "Building the simulation and running it can be done with the command:  biodynamo run  All your source code will be compiled and linked against the BioDynaMo libraries, and an executable file\nwill be created and run. It is at this point you might encounter compilation errors.\nYou will need to fix them before the simulation can actually run.",
            "title": "3. Run the simulation"
        },
        {
            "location": "/usage/#request-assistance",
            "text": "It can happen that you encounter an error or issue that you cannot solve on your own. \nOr you might be convinced that there is a bug in BioDynaMo. \nFor such occasions we have provided you with BioDynaMo assistance:  biodynamo assist  This command will create a folder called  debug  in which debug information will be collected.\nA git branch will be created and uploaded to Github. Send the link to this branch to us, \nso we can take a look at the issue. Check out  Contact  on how to contact us.",
            "title": "Request assistance"
        },
        {
            "location": "/usage/#notes-for-developers",
            "text": "If you have installed the developers version and you want to make use of your\ncustom features then the procedure is similar to the user-installed usage. The\nonly extra step that needs to be performed is the following one at the beginning:  source  /opt/biodynamo/biodynamo_dev.env   Mac OS users  You will  not  need to  source biodynamo.env  after this.",
            "title": "Notes for developers"
        },
        {
            "location": "/hello_world/",
            "text": "The most basic BioDynaMo simulation (i.e. our Hello World program) is a\nstatic single cell. It is the default model that comes with the installation of\nBioDynaMo. In this section we shall go over the three simple steps of running\nthis simple simulation.\n\n\nStep 1: Create your simulation\n\n\nRun the following command to create a new project called \"hello_world\":\n\n\nbiodynamo new hello_world\n\n\n\n\n\nLog in with your Github account when prompted. Or append \n--no-github\n if you\ndo not want this.\n\n\nStep 2: Build your simulation\n\n\nGo into the newly created directory \nhello_world\n with:\n\n\ncd\n hello_world\n\n\n\n\n\nAnd build the project files with:\n\n\nbiodynamo build\n\n\n\n\n\nStep 3: Run your simulation\n\n\n\n\nNote (for Mac OS users)\n\n\nIn order for the CLI to be available in your shell environment\nit is necessary to run the following command:\n\n\nsource biodynamo.env\n\n\n\n\nbiodynamo run\n\n\n\n\n\nYou should see \"Simulation completed succesfully\" as the output.\n\n\nExtra: Cell division\n\n\nLet's make the simulation more interesting by adding a biological behavior to the\ncell: cell division. Open the \nsrc/hello_world.h\n\n\nReplace the \nCompileTimeParameters\n struct with the following one:\n\n\ntemplate\n \n<\ntypename\n \nBackend\n>\n\n\nstruct\n \nCompileTimeParam\n \n:\n \npublic\n \nDefaultCompileTimeParam\n<\nBackend\n>\n \n{\n\n  \nusing\n \nBiologyModules\n \n=\n \nVariant\n<\nGrowDivide\n>\n;\n\n\n};\n\n\n\n\n\n\nAnd add the following line to the \nconstruct\n function:\n\n\ncell\n.\nAddBiologyModule\n(\nGrowDivide\n(\n32\n,\n \n3000\n,\n \n{\ngAllBmEvents\n}));\n\n\n\n\n\n\nRebuild and rerun the simulation to have the cell division take effect. visit the\nnext exercise to learn about the visualization features of BioDynaMo.\n\n\n\n\nInfo\n\n\nYou might want to run for a few more simulation steps to witness cells dividing",
            "title": "Hello World"
        },
        {
            "location": "/hello_world/#step-1-create-your-simulation",
            "text": "Run the following command to create a new project called \"hello_world\":  biodynamo new hello_world  Log in with your Github account when prompted. Or append  --no-github  if you\ndo not want this.",
            "title": "Step 1: Create your simulation"
        },
        {
            "location": "/hello_world/#step-2-build-your-simulation",
            "text": "Go into the newly created directory  hello_world  with:  cd  hello_world  And build the project files with:  biodynamo build",
            "title": "Step 2: Build your simulation"
        },
        {
            "location": "/hello_world/#step-3-run-your-simulation",
            "text": "Note (for Mac OS users)  In order for the CLI to be available in your shell environment\nit is necessary to run the following command:  source biodynamo.env   biodynamo run  You should see \"Simulation completed succesfully\" as the output.",
            "title": "Step 3: Run your simulation"
        },
        {
            "location": "/hello_world/#extra-cell-division",
            "text": "Let's make the simulation more interesting by adding a biological behavior to the\ncell: cell division. Open the  src/hello_world.h  Replace the  CompileTimeParameters  struct with the following one:  template   < typename   Backend >  struct   CompileTimeParam   :   public   DefaultCompileTimeParam < Backend >   { \n   using   BiologyModules   =   Variant < GrowDivide > ;  };   And add the following line to the  construct  function:  cell . AddBiologyModule ( GrowDivide ( 32 ,   3000 ,   { gAllBmEvents }));   Rebuild and rerun the simulation to have the cell division take effect. visit the\nnext exercise to learn about the visualization features of BioDynaMo.   Info  You might want to run for a few more simulation steps to witness cells dividing",
            "title": "Extra: Cell division"
        },
        {
            "location": "/visualization/",
            "text": "Enabling visualization is very easy. BioDynaMo can be configured through its own\nconfiguration file: \nbdm.toml\n. Visualization is just one of the many configuration\noptions. Let's take a look at how to set it. We shall continue using the \nhello_world\n\nexample from the previous exercise.\n\n\nCreate the configuration file\n\n\nIn your simulation directory \nhello_world\n create a new file called \nbdm.toml\n.\nYou can also do this from the command line with the following command:\n\n\ntouch bdm.toml\n\n\n\n\n\nExport visualization files\n\n\nOne way to enable visualization is to export a visualization file every time step\n(or every N time steps). In the \nbmd.toml\n file add the following lines:\n\n\n[visualization]\n\n\nexport\n \n=\n \ntrue\n\n\nexport_interval\n \n=\n \n1\n\n\n    \n[[visualize_sim_object]]\n\n    \nname\n \n=\n \n\"Cell\"\n\n\n    additional_data_members = [ \"diameter_\" ]\n\n\n\n\n\n\nThis will export a visualization file every time step. You can set the frequency\nby setting the \nexport_interval\n. Make sure that you run a good number of steps\nso that the cells have time to divide. Set it to around 2000 for the \nhello_world\n example.\nYou can do this in \nsrc/hello_world.h\n in the \nscheduler.Simulate(time_steps)\n function.\nRun your simulation with \nbiodynamo run\n.\n\n\nNow we need to open ParaView:\n\n\n\n\nWarning\n\n\nMake sure you start ParaView from the project directory. Otherwise, ParaView might not find the exported files.\n\n\n\n\nOn Linux:\n\n\nbiodynamo.paraview\n\n\n\n\n\nOn Mac OS:\n\n\nparaview\n\n\n\n\n\nSelect \"File->Load State\" as shown below:\n\n\n\n\nNavigate to your simulation directory and select the \npvsm\n file.\n\n\n\n\nIn the next window keep the default (\nUse File Names From State\n) and click OK.",
            "title": "Visualization"
        },
        {
            "location": "/visualization/#create-the-configuration-file",
            "text": "In your simulation directory  hello_world  create a new file called  bdm.toml .\nYou can also do this from the command line with the following command:  touch bdm.toml",
            "title": "Create the configuration file"
        },
        {
            "location": "/visualization/#export-visualization-files",
            "text": "One way to enable visualization is to export a visualization file every time step\n(or every N time steps). In the  bmd.toml  file add the following lines:  [visualization]  export   =   true  export_interval   =   1 \n\n     [[visualize_sim_object]] \n     name   =   \"Cell\"      additional_data_members = [ \"diameter_\" ]   This will export a visualization file every time step. You can set the frequency\nby setting the  export_interval . Make sure that you run a good number of steps\nso that the cells have time to divide. Set it to around 2000 for the  hello_world  example.\nYou can do this in  src/hello_world.h  in the  scheduler.Simulate(time_steps)  function.\nRun your simulation with  biodynamo run .  Now we need to open ParaView:   Warning  Make sure you start ParaView from the project directory. Otherwise, ParaView might not find the exported files.",
            "title": "Export visualization files"
        },
        {
            "location": "/visualization/#on-linux",
            "text": "biodynamo.paraview",
            "title": "On Linux:"
        },
        {
            "location": "/visualization/#on-mac-os",
            "text": "paraview  Select \"File->Load State\" as shown below:   Navigate to your simulation directory and select the  pvsm  file.   In the next window keep the default ( Use File Names From State ) and click OK.",
            "title": "On Mac OS:"
        },
        {
            "location": "/diffusion/",
            "text": "One of BioDynaMo's built-in biological processes is extracellular diffusion.\nIt is the process of extracellular substances diffusing through space. The constants\nthat govern the diffusion process can be set by the user. Let's go through an\nexample where diffusion plays a role.\n\n\nDownload the code from Github\n\n\nIf you are still in the \nhello_world\n directory.\n\n\nOn Linux:\n\n\nbiodynamo.git clone https://github.com/BioDynaMo/simulation-templates.git\n\ncd\n simulation-templates\nbiodynamo.git checkout newcastle\n\n\n\n\n\nOn Mac OS:\n\n\ngit clone https://github.com/BioDynaMo/simulation-templates.git\n\ncd\n simulation-templates\ngit checkout newcastle\n\n\n\n\n\nInspect the code\n\n\nGo into the \ndiffusion\n directory and open the source file \nsrc/diffusion_biology_modules.h\n in your favorite editor.\nWe can note the following things from its content:\n\n\n1. List the substances\n\n\nenum\n \nSubstances\n \n{\n \nkKalium\n \n};\n\n\n\n\n\n\nThe extracellular substances that will be used in the simulation are listed in\nan \nenum\n data structure. In this case it is just a single substance. According to our C++\ncoding style we will prepend the substance's name with the letter \"k\".\n\n\n2. Set up the biology modules\n\n\nOpen the \nsrc/diffusion.h\n source file.\n\n\nIn order for BioDynaMo to anticipate the biology modules that you want to use in\nthe simulation, we need to declare them in our \nCompileTimeParameters\n as such:\n\n\ntemplate\n \n<\ntypename\n \nBackend\n>\n\n\nstruct\n \nCompileTimeParam\n \n:\n \npublic\n \nDefaultCompileTimeParam\n<\nBackend\n>\n \n{\n\n  \nusing\n \nBiologyModules\n \n=\n \nVariant\n<\nChemotaxis\n,\n \nKaliumSecretion\n>\n;\n\n\n};\n\n\n\n\n\n\nThe important part here is the \nChemotaxis\n and\n\nKaliumSecretion\n biology modules. These are the modules that will govern the\nbehavior of the simulation objects (i.e. cells). We import them at the top of the\nsource code with \n#include diffusion_biology_modules\n.\n\n\n3. Set up the simulation objects\n\n\nNext up is creating simulation objects:\n\n\n  \nauto\n \nconstruct\n \n=\n \n[](\nconst\n \nstd\n::\narray\n<\ndouble\n,\n \n3\n>&\n \nposition\n)\n \n{\n\n    \nCell\n \ncell\n(\nposition\n);\n\n    \ncell\n.\nSetDiameter\n(\n30\n);\n\n    \ncell\n.\nSetMass\n(\n1.0\n);\n\n    \ncell\n.\nAddBiologyModule\n(\nChemotaxis\n());\n\n    \nstd\n::\narray\n<\ndouble\n,\n \n3\n>\n \nsecretion_position\n \n=\n \n{{\n50\n,\n \n50\n,\n \n50\n}};\n\n    \nif\n \n(\nposition\n \n==\n \nsecretion_position\n)\n \n{\n\n      \ncell\n.\nAddBiologyModule\n(\nKaliumSecretion\n());\n\n    \n}\n\n    \nreturn\n \ncell\n;\n\n  \n};\n\n  \nstd\n::\nvector\n<\nstd\n::\narray\n<\ndouble\n,\n \n3\n>>\n \npositions\n;\n\n  \npositions\n.\npush_back\n({\n0\n,\n \n0\n,\n \n0\n});\n\n  \npositions\n.\npush_back\n({\n100\n,\n \n0\n,\n \n0\n});\n\n  \npositions\n.\npush_back\n({\n0\n,\n \n100\n,\n \n0\n});\n\n  \npositions\n.\npush_back\n({\n0\n,\n \n0\n,\n \n100\n});\n\n  \npositions\n.\npush_back\n({\n0\n,\n \n100\n,\n \n100\n});\n\n  \npositions\n.\npush_back\n({\n100\n,\n \n0\n,\n \n100\n});\n\n  \npositions\n.\npush_back\n({\n100\n,\n \n100\n,\n \n0\n});\n\n  \npositions\n.\npush_back\n({\n100\n,\n \n100\n,\n \n100\n});\n\n  \n// the cell responsible for secretion\n\n  \npositions\n.\npush_back\n({\n50\n,\n \n50\n,\n \n50\n});\n\n  \nModelInitializer\n::\nCreateCells\n(\npositions\n,\n \nconstruct\n);\n\n\n\n\n\n\nThe \nconstruct\n lambda defines the properties of each cell that we create. These can be\nphysical properties (diameter, mass), but also biological properties and behaviors\n(chemotaxis, substance secretion)\n\n\nIn this example, each cell is assigned the \nChemotaxis\n behavior. In \ndiffusion_biology_behaviors.h\n you can\ncheck the source code of this module. Basically it makes cells move according to the gradient,\ncaused by a concentration difference of the substance. One of the cells\n(the cell at position \n{50, 50, 50}\n) will be the one secreting the substance;\nit therefore gets assigned the \nSubstanceSecretion\n behavior.\n\n\nFurthermore, we define the initial positions of the cells. In this example it is\ndone explicitly, but one could also generate a grid of cells, or a random distribution\nof cells.\n\n\nConfigure the simulation\n\n\nCreate a \nbdm.toml\n file in the \ndiffusion\n directory, and copy the following lines\ninto it:\n\n\n[visualization]\n\n\nexport\n \n=\n \ntrue\n\n\nexport_interval\n \n=\n \n10\n\n\n    \n[[visualize_sim_object]]\n\n    \nname\n \n=\n \n\"Cell\"\n\n\n    additional_data_members = [ \"diameter_\" ]\n\n\n    \n[[visualize_diffusion]]\n\n    \nname\n \n=\n \n\"Kalium\"\n\n\n    gradient = true\n\n\n\n\n\n\nThis will enable exporting visualization files, so that we can visualize the\nsimulation after it has finished. Furthermore, we enable the output of the diameter\nof our simulation objects (by default named \"Cell\"), and the gradient data of the\nextracellular diffusion\n\n\nBuild and run the simulation\n\n\n\n\nNote (for Mac OS users)\n\n\nIn order for the CLI to be available in your shell environment\nit is necessary to run the following command:\n\n\nsource biodynamo.env\n\n\n\n\nRun the following commands to build and run the simulation.\n\n\nbiodynamo run\n\n\n\n\n\nVisualize the simulation\n\n\nLoad the generated ParaView state file as described in \nSection Visualization\n.\n\n\nFrom \"View\", select \"Animation Panel\". This will display some animation settings\nat the bottom of the screen. From the \"Mode\" select \"Real Time\".\nThen click the Play button at the top of the screen to run the simulation visualization.\n\n\n\n  \n\n  Your browser does not support the video tag.",
            "title": "Diffusion"
        },
        {
            "location": "/diffusion/#download-the-code-from-github",
            "text": "If you are still in the  hello_world  directory.",
            "title": "Download the code from Github"
        },
        {
            "location": "/diffusion/#on-linux",
            "text": "biodynamo.git clone https://github.com/BioDynaMo/simulation-templates.git cd  simulation-templates\nbiodynamo.git checkout newcastle",
            "title": "On Linux:"
        },
        {
            "location": "/diffusion/#on-mac-os",
            "text": "git clone https://github.com/BioDynaMo/simulation-templates.git cd  simulation-templates\ngit checkout newcastle",
            "title": "On Mac OS:"
        },
        {
            "location": "/diffusion/#inspect-the-code",
            "text": "Go into the  diffusion  directory and open the source file  src/diffusion_biology_modules.h  in your favorite editor.\nWe can note the following things from its content:",
            "title": "Inspect the code"
        },
        {
            "location": "/diffusion/#1-list-the-substances",
            "text": "enum   Substances   {   kKalium   };   The extracellular substances that will be used in the simulation are listed in\nan  enum  data structure. In this case it is just a single substance. According to our C++\ncoding style we will prepend the substance's name with the letter \"k\".",
            "title": "1. List the substances"
        },
        {
            "location": "/diffusion/#2-set-up-the-biology-modules",
            "text": "Open the  src/diffusion.h  source file.  In order for BioDynaMo to anticipate the biology modules that you want to use in\nthe simulation, we need to declare them in our  CompileTimeParameters  as such:  template   < typename   Backend >  struct   CompileTimeParam   :   public   DefaultCompileTimeParam < Backend >   { \n   using   BiologyModules   =   Variant < Chemotaxis ,   KaliumSecretion > ;  };   The important part here is the  Chemotaxis  and KaliumSecretion  biology modules. These are the modules that will govern the\nbehavior of the simulation objects (i.e. cells). We import them at the top of the\nsource code with  #include diffusion_biology_modules .",
            "title": "2. Set up the biology modules"
        },
        {
            "location": "/diffusion/#3-set-up-the-simulation-objects",
            "text": "Next up is creating simulation objects:     auto   construct   =   []( const   std :: array < double ,   3 >&   position )   { \n     Cell   cell ( position ); \n     cell . SetDiameter ( 30 ); \n     cell . SetMass ( 1.0 ); \n     cell . AddBiologyModule ( Chemotaxis ()); \n     std :: array < double ,   3 >   secretion_position   =   {{ 50 ,   50 ,   50 }}; \n     if   ( position   ==   secretion_position )   { \n       cell . AddBiologyModule ( KaliumSecretion ()); \n     } \n     return   cell ; \n   }; \n   std :: vector < std :: array < double ,   3 >>   positions ; \n   positions . push_back ({ 0 ,   0 ,   0 }); \n   positions . push_back ({ 100 ,   0 ,   0 }); \n   positions . push_back ({ 0 ,   100 ,   0 }); \n   positions . push_back ({ 0 ,   0 ,   100 }); \n   positions . push_back ({ 0 ,   100 ,   100 }); \n   positions . push_back ({ 100 ,   0 ,   100 }); \n   positions . push_back ({ 100 ,   100 ,   0 }); \n   positions . push_back ({ 100 ,   100 ,   100 }); \n   // the cell responsible for secretion \n   positions . push_back ({ 50 ,   50 ,   50 }); \n   ModelInitializer :: CreateCells ( positions ,   construct );   The  construct  lambda defines the properties of each cell that we create. These can be\nphysical properties (diameter, mass), but also biological properties and behaviors\n(chemotaxis, substance secretion)  In this example, each cell is assigned the  Chemotaxis  behavior. In  diffusion_biology_behaviors.h  you can\ncheck the source code of this module. Basically it makes cells move according to the gradient,\ncaused by a concentration difference of the substance. One of the cells\n(the cell at position  {50, 50, 50} ) will be the one secreting the substance;\nit therefore gets assigned the  SubstanceSecretion  behavior.  Furthermore, we define the initial positions of the cells. In this example it is\ndone explicitly, but one could also generate a grid of cells, or a random distribution\nof cells.",
            "title": "3. Set up the simulation objects"
        },
        {
            "location": "/diffusion/#configure-the-simulation",
            "text": "Create a  bdm.toml  file in the  diffusion  directory, and copy the following lines\ninto it:  [visualization]  export   =   true  export_interval   =   10 \n\n     [[visualize_sim_object]] \n     name   =   \"Cell\"      additional_data_members = [ \"diameter_\" ] \n\n     [[visualize_diffusion]] \n     name   =   \"Kalium\"      gradient = true   This will enable exporting visualization files, so that we can visualize the\nsimulation after it has finished. Furthermore, we enable the output of the diameter\nof our simulation objects (by default named \"Cell\"), and the gradient data of the\nextracellular diffusion",
            "title": "Configure the simulation"
        },
        {
            "location": "/diffusion/#build-and-run-the-simulation",
            "text": "Note (for Mac OS users)  In order for the CLI to be available in your shell environment\nit is necessary to run the following command:  source biodynamo.env   Run the following commands to build and run the simulation.  biodynamo run",
            "title": "Build and run the simulation"
        },
        {
            "location": "/diffusion/#visualize-the-simulation",
            "text": "Load the generated ParaView state file as described in  Section Visualization .  From \"View\", select \"Animation Panel\". This will display some animation settings\nat the bottom of the screen. From the \"Mode\" select \"Real Time\".\nThen click the Play button at the top of the screen to run the simulation visualization.  \n   \n  Your browser does not support the video tag.",
            "title": "Visualize the simulation"
        },
        {
            "location": "/substance_initializers/",
            "text": "You might want to initialize the concentration of one or more of the substances\nin your simulation. In this tutorial we shal take a look on how to do so.\n\n\nTutorial by example\n\n\nGo into the \ntest/integration\n directory and open the source file\n\nsubstance_initialization.h\n in your favorite editor. \n\n\n1. List the substance(s)\n\n\nWe start the code of by listing the s we will use in our simulation in an enum\ndata structure. In this example we just create one substance.\n\n\nenum\n \nSubstances\n \n{\n \nkSubstance\n \n};\n\n\n\n\n\n\n2. Specify the space dimensions\n\n\nWe bound our space to keep things simple.\n\n\nParam\n::\nbound_space_\n \n=\n \ntrue\n;\n\n\nParam\n::\nmin_bound_\n \n=\n \n0\n;\n\n\nParam\n::\nmax_bound_\n \n=\n \n250\n;\n\n\n\n\n\n\n3. Create a cell\n\n\nWe create one cell with diameter 10, at a random location\n\n\nauto\n \nconstruct\n \n=\n \n[](\nconst\n \nstd\n::\narray\n<\ndouble\n,\n \n3\n>&\n \nposition\n)\n \n{\n\n  \nCell\n \ncell\n(\nposition\n);\n\n  \ncell\n.\nSetDiameter\n(\n10\n);\n\n  \nreturn\n \ncell\n;\n\n\n};\n\n\nModelInitializer\n::\nCreateCellsRandom\n(\nParam\n::\nmin_bound_\n,\n \nParam\n::\nmax_bound_\n,\n\n                                      \n1\n,\n \nconstruct\n);\n\n\n\n\n\n\n4. Define the substance(s)\n\n\nWe define the diffusion parameters of the substance(s) in our simulation. We\nchoose a diffusion coefficient of 0.5, a decay constant 0f 0.1 and a resolution\nof 1.\n\n\nModelInitializer\n::\nDefineSubstance\n(\nkSubstance\n,\n \n\"Substance\"\n,\n \n0.5\n,\n \n0.1\n,\n \n1\n);\n\n\n\n\n\n\n5. Initialize the substance(s)\n\n\nNow comes the most important part of the tutorial: initializing our substance(s)\nconcentration values throught the space. We will use the function\n\nModelInitializer::InitializeSubstance\n for this purpose.\n\n\nModelInitializer\n::\nInitializeSubstance\n(\nkSubstance\n,\n \n\"Substance\"\n,\n \nGaussianBand\n(\n120\n,\n \n5\n,\n \nAxis\n::\nkXAxis\n));\n\n\n\n\n\n\nLet's break this down. We first pass the substance enum id and name in the\nfunction in order to specify which substance we want to initialize. Then we\nsimply pass the model we want to initialize the substance with (we call these \"initializers\").\nIn this case we choose for a GaussianBand with a mean value of 120 along the\nx-axis, and a variance of 5.\n\n\nThe result (visualized with ParaView) is the following:\n\n\n\n\nCreating a custom substance initializer\n\n\nIn this tutorial you have seen how to initialize a substance's concentration\nvalues with the \nGaussianBand\n initializer. Of course this is not the only\nmodel to initialize a substance with. We have several predefined initializers\navailable in BioDynaMo, and you can create your own.\n\n\nLet's take a look at an existing substance initializer.\n\n\nOption 1: Functors\n\n\nstruct\n \nGaussianBand\n \n{\n\n  \ndouble\n \nmean_\n;\n\n  \ndouble\n \nsigma_\n;\n\n  \nuint8_t\n \naxis_\n;\n\n\n  \nGaussianBand\n(\ndouble\n \nmean\n,\n \ndouble\n \nsigma\n,\n \nuint8_t\n \naxis\n)\n \n{\n\n    \nmean_\n \n=\n \nmean\n;\n\n    \nsigma_\n \n=\n \nsigma\n;\n\n    \naxis_\n \n=\n \naxis\n;\n\n  \n}\n\n\n  \ndouble\n \noperator\n()(\ndouble\n \nx\n,\n \ndouble\n \ny\n,\n \ndouble\n \nz\n)\n \n{\n\n    \nswitch\n(\naxis_\n)\n \n{\n\n      \ncase\n \nAxis\n::\nkXAxis\n:\n \nreturn\n \nROOT\n::\nMath\n::\nnormal_pdf\n(\nx\n,\n \nsigma_\n,\n \nmean_\n);\n\n      \ncase\n \nAxis\n::\nkYAxis\n:\n \nreturn\n \nROOT\n::\nMath\n::\nnormal_pdf\n(\ny\n,\n \nsigma_\n,\n \nmean_\n);\n\n      \ncase\n \nAxis\n::\nkZAxis\n:\n \nreturn\n \nROOT\n::\nMath\n::\nnormal_pdf\n(\nz\n,\n \nsigma_\n,\n \nmean_\n);\n\n      \ndefault\n:\n \nthrow\n \nstd\n::\nlogic_error\n(\n\"You have chosen an non-existing axis!\"\n);\n \n    \n}\n\n  \n}\n\n\n};\n\n\n\n\n\n\nThe above code is what is called a 'functor' in C++. Here it basically describes\nthe model or operation that you want to perform on the entire diffusion space.\nIn the constructor we save the mean, variance and orientation axis, so that this\ninitializer can be used generically. The operator tells BioDynaMo what the concentration\nvalue should be for x, y, and z. BioDynaMo will make sure that your operator is\nexecuted over the whole simulation space. In this example we make use of a function\nthat models the normal (i.e. Gaussian) probability density function.\n\n\nOption 2: Lambdas\n\n\nFunctors are nice if you want to create a generic model that you can apply for\nseveral input variables (e.g. different means, sigmas in the above example).\nBut you might want to just keep it short and simple; in which case lambdas are\nnice to use. We can accomplish exactly the same result as the above example with\nthe following lambda:\n\n\nauto\n \ngaussian_band\n \n=\n \n[]\n(\ndouble\n \nx\n,\n \ndouble\n \ny\n,\n \ndouble\n \nz\n)\n \n{\n\n  \nreturn\n \nROOT\n:\n:\nMath\n::\nnormal_pdf\n(\nx\n,\n \n5\n,\n \n120\n);\n\n\n}\n;\n\n\n\n\n\n\nMuch simpler right? As you can see we have hard-coded some of the variables that\nwe had generalized in our functor. So depending on your use case or preference,\nlambdas might be the way to go.",
            "title": "Substance Initialization"
        },
        {
            "location": "/substance_initializers/#tutorial-by-example",
            "text": "Go into the  test/integration  directory and open the source file substance_initialization.h  in your favorite editor.",
            "title": "Tutorial by example"
        },
        {
            "location": "/substance_initializers/#1-list-the-substances",
            "text": "We start the code of by listing the s we will use in our simulation in an enum\ndata structure. In this example we just create one substance.  enum   Substances   {   kSubstance   };",
            "title": "1. List the substance(s)"
        },
        {
            "location": "/substance_initializers/#2-specify-the-space-dimensions",
            "text": "We bound our space to keep things simple.  Param :: bound_space_   =   true ;  Param :: min_bound_   =   0 ;  Param :: max_bound_   =   250 ;",
            "title": "2. Specify the space dimensions"
        },
        {
            "location": "/substance_initializers/#3-create-a-cell",
            "text": "We create one cell with diameter 10, at a random location  auto   construct   =   []( const   std :: array < double ,   3 >&   position )   { \n   Cell   cell ( position ); \n   cell . SetDiameter ( 10 ); \n   return   cell ;  };  ModelInitializer :: CreateCellsRandom ( Param :: min_bound_ ,   Param :: max_bound_ , \n                                       1 ,   construct );",
            "title": "3. Create a cell"
        },
        {
            "location": "/substance_initializers/#4-define-the-substances",
            "text": "We define the diffusion parameters of the substance(s) in our simulation. We\nchoose a diffusion coefficient of 0.5, a decay constant 0f 0.1 and a resolution\nof 1.  ModelInitializer :: DefineSubstance ( kSubstance ,   \"Substance\" ,   0.5 ,   0.1 ,   1 );",
            "title": "4. Define the substance(s)"
        },
        {
            "location": "/substance_initializers/#5-initialize-the-substances",
            "text": "Now comes the most important part of the tutorial: initializing our substance(s)\nconcentration values throught the space. We will use the function ModelInitializer::InitializeSubstance  for this purpose.  ModelInitializer :: InitializeSubstance ( kSubstance ,   \"Substance\" ,   GaussianBand ( 120 ,   5 ,   Axis :: kXAxis ));   Let's break this down. We first pass the substance enum id and name in the\nfunction in order to specify which substance we want to initialize. Then we\nsimply pass the model we want to initialize the substance with (we call these \"initializers\").\nIn this case we choose for a GaussianBand with a mean value of 120 along the\nx-axis, and a variance of 5.  The result (visualized with ParaView) is the following:",
            "title": "5. Initialize the substance(s)"
        },
        {
            "location": "/substance_initializers/#creating-a-custom-substance-initializer",
            "text": "In this tutorial you have seen how to initialize a substance's concentration\nvalues with the  GaussianBand  initializer. Of course this is not the only\nmodel to initialize a substance with. We have several predefined initializers\navailable in BioDynaMo, and you can create your own.  Let's take a look at an existing substance initializer.",
            "title": "Creating a custom substance initializer"
        },
        {
            "location": "/substance_initializers/#option-1-functors",
            "text": "struct   GaussianBand   { \n   double   mean_ ; \n   double   sigma_ ; \n   uint8_t   axis_ ; \n\n   GaussianBand ( double   mean ,   double   sigma ,   uint8_t   axis )   { \n     mean_   =   mean ; \n     sigma_   =   sigma ; \n     axis_   =   axis ; \n   } \n\n   double   operator ()( double   x ,   double   y ,   double   z )   { \n     switch ( axis_ )   { \n       case   Axis :: kXAxis :   return   ROOT :: Math :: normal_pdf ( x ,   sigma_ ,   mean_ ); \n       case   Axis :: kYAxis :   return   ROOT :: Math :: normal_pdf ( y ,   sigma_ ,   mean_ ); \n       case   Axis :: kZAxis :   return   ROOT :: Math :: normal_pdf ( z ,   sigma_ ,   mean_ ); \n       default :   throw   std :: logic_error ( \"You have chosen an non-existing axis!\" );  \n     } \n   }  };   The above code is what is called a 'functor' in C++. Here it basically describes\nthe model or operation that you want to perform on the entire diffusion space.\nIn the constructor we save the mean, variance and orientation axis, so that this\ninitializer can be used generically. The operator tells BioDynaMo what the concentration\nvalue should be for x, y, and z. BioDynaMo will make sure that your operator is\nexecuted over the whole simulation space. In this example we make use of a function\nthat models the normal (i.e. Gaussian) probability density function.",
            "title": "Option 1: Functors"
        },
        {
            "location": "/substance_initializers/#option-2-lambdas",
            "text": "Functors are nice if you want to create a generic model that you can apply for\nseveral input variables (e.g. different means, sigmas in the above example).\nBut you might want to just keep it short and simple; in which case lambdas are\nnice to use. We can accomplish exactly the same result as the above example with\nthe following lambda:  auto   gaussian_band   =   [] ( double   x ,   double   y ,   double   z )   { \n   return   ROOT : : Math :: normal_pdf ( x ,   5 ,   120 );  } ;   Much simpler right? As you can see we have hard-coded some of the variables that\nwe had generalized in our functor. So depending on your use case or preference,\nlambdas might be the way to go.",
            "title": "Option 2: Lambdas"
        },
        {
            "location": "/documentation/",
            "text": "Documentation\n\n\n\n\nWarning\n\n\nWe are currently under construction!",
            "title": "Documentation"
        },
        {
            "location": "/documentation/#documentation",
            "text": "Warning  We are currently under construction!",
            "title": "Documentation"
        },
        {
            "location": "/contact/",
            "text": "Contact\n\n\nPlease contact us at: \nbiodynamo-talk@cern.ch",
            "title": "Contact"
        },
        {
            "location": "/contact/#contact",
            "text": "Please contact us at:  biodynamo-talk@cern.ch",
            "title": "Contact"
        }
    ]
}